NOVIDADE
-Em resumo, use new quando precisar criar uma nova instância de um tipo, e evite quando já tiver uma instância ou estiver utilizando tipos por valor de forma 
apropriada;
- quando voce coloca algo e um ponto, tipo musica. é como se voce estivesse entrando dentro da variavel;

TIPOS PRIMITIVOS
-Grupo de variaveis tipadas;
-string,int;

COMANDOS
-control + r + r = voce mudar a nomenclatura de todas as strings de uma vez;
-prop + tab = propriedade, e ja atribui o get set, todo o template;
- o "referencias" em cima da propriedade, indica em quantos locais ela está;


ORIENTACAO A OBJETOS/OQ EU ENTENDI
-Primeiro temos o arquivo principal, e um outro arquivo que ta a classe. A classe é como se fosse um molde, que terá seus objetos(propriedades, comportamento) 
(dentro das chaves). Qnd vc faz por ex Carro meuCarro = new Carro(), voce está criando uma instancia da classe, e voce pode atribuir propriedades e comportamentos
de acordo com os objetos;
-método é tipo funcao;
-A classe tem os seus ATRIBUTOS que servirao tipo de referencia molde para valores que serao atribuidos. Assim como o método, que é tipo função dentro da classe, que
também executa uma série de códigos e ações, mas com moldes. No arquivo principal voce atribui valores para os objetos definidos dentro da classe;
------------------------
-Classe = Agrupamos conceitos em um conceito maior, numa coisa mais complexa. O agrupamento de costume no C# é feito dessa maneira, usando chaves. O que ta na frente,
Musica, é o nome da classe.
class Musica
{
    public string nome;
    public string artista;
    public int duracao;
    public bool disponivel;
}
- o public é para que voce consiga exibir para fora, que ele é público;
Musica musica1 = new Musica() = musica1 é o nome de uma variavel que está armazenando a instância da classe Musica, é um identificador que voce usará para 
referenciar essa instância (no caso a classe Musica) no seu código;
-O operador new é usado para criar uma nova instância da classe Musica. Ao usar new, você está chamando o construtor da classe, que pode inicializar os atributos da 
instância e realizar outras configurações necessárias. Ou seja, o new inicializa os atributos, alocar espaço na memoria para armazenar a nova instancia da classe;

CRIANDO COMPORTAMENTO PARA UMA CLASSE (metodo) - como se fosse uma função. Bem parecida, apesar de algumas pequenas diferenças
-O metodo é exatamente isso, voce criar um comportamento para uma classe;
 public void ExibirFichaTecnica()
 {
     Console.WriteLine($"Nome: {nome}");
     Console.WriteLine($"Artista: {artista}");
     Console.WriteLine($"Duracao: {duracao}");
     Console.WriteLine($"Disponivel: {disponivel}");
     if (disponivel)
     {
         Console.WriteLine("Disponivel no plano");
     } else
     {
         Console.WriteLine("Adquita o plano Plus+");
     }
 }
-Public, pra permitir que ela seja chamada fora do arquivo;

-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ (topico grande que vai ter subtopicos dentro)
CLASSE/INSTANCIA/PROPRIEDADES
CLASSE
-para criar uma classe, n tem segredo:
class Nome 
{
  prop (atalho para montar = public x (tipo da var) y (nome) { get; set; }	
  
}
-voce vai criando as propriedades da classe que voce quer;
-a classe é como um molde, ou um modelo que possuem suas propriedades, métodos(funcoes);
-entao por ex, vamo definir que:
public class Album
{
    public string Nome { get; set; }	      -Definimos a classe com suas propriedades(Nome e Artista). get set permitem a leitura e escrita das propriedades;
    public string Artista { get; set; }	
}

Album albumDoQueen = new Album(); 	      -La na main, voce primeiro instancia a classe "original". Ai depois disso, voce pode atribuir valores as propriedades;


albumDoQueen.Nome = "A Night at the Opera";
albumDoQueen.Artista = "Queen";			-Aq seria a continuação. "A night at the Opera" e "Queen" são os valores atribuidos às propriedades Nome e Artista;
--------------------------
INSTANCIA
-Quando voce cria uma instancia, no main, voce ta criando uma instancia/objeto da classe "molde/principal". Dentro dessa classe instancionada criada, terão as
propriedades daquela instancia. Cada propriedade receberá por fim, um valor específico;
-Isso permite que cada propriedade tenha seus proprios dados! Apesar dos atributos moldes (eu chamo assim) se manderem os mesmos;
-Primeiro voce faz uma instancia da classe. Depois atribui os valores específicos a cada propriedade dentro da classe instancionada;
--------------------------
INSTANCIA/GET SET
-E por fim, na estrutura da classe tem o get set, que é tipo basico da estrutura do class envolvendo as instancias. No caso, ela te permite que voce manipule as 
instancias. eles permitem que voce controle o acesso a esses campos. o get eh leitura e o set eh escrita. o get permite que voce acesse o valor de um campo, e o set
permite que voce atribua um valor ao campo, uma condição a ele. Com o set voce pode adicionar logica para validar os dados antes de atribui-los ao campo!;
-nao é obrigatorio. Por ex a propriedade DuracaoTotal voce coloca funcao anonima na frente dela e tals;
-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ 

PUBLIC/PRIVATE
-Voce so consegue ter o acesso a determinado atributo, dentro das chaves (caso for privado);
-Publico é pra quando os dados não são sensíveis. Entao ele pode ser acessado por fora;
-Private é para aqueles casos onde uma informação é sensível, então ela não deveria ser public;
Console.WriteLine(musica1.disponivel) = no caso, disponivel é um objeto que é privado. Logo, essa linha nao vai funcionar. Na verdade, ela nem vai conseguir 
encontrar;

-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ (topico grande que vai ter subtopicos dentro)
PROPRIEDADE GET (leitura) SET (ESCRITA) - PROPRIEDADE - 
-Tal propriedade permite voce acessar e modificar os valores dos atributos (objetos) de uma classe;
-Precisa ter letra maiuscula, por ser uma propriedade que vai receber set e get (boas praticas);
-Analogia: Imagine que voce tenha uma casa, e nessa casa voce tem um quarto só de brinquedos. O metodo get, seria a ação de abrir a porta do quarto e ver todos os 
brinquedos que estão ali (ler a variavel). O metodo set, seria a ação de adicionar ou remover um brinquedo daquele espaço. Mas para adicionar um brinquedo, tem que
satisfazer a uma condição, por exemplo, que o quarto tenha espaço suficiente para adicionar mais um brinquedo. Ou seja, get = acesso ao valor da variavel.
set = modificar o valor da variavel a partir de determinadas condições);
Usar propriedades GET e SET traz um nível de controle e segurança que a atribuição direta não oferece. Isso ajuda a evitar bugs e a garantir que seu programa 
funcione conforme o esperado;
-Quando voce tira o set, voce está dizendo que não é possível atribuir um valor, apenas ler ele. (get);
-Outro exemplo de um saldo bancário. Pra voce adicionar ou remover um valor do seu saldo, voce primeiro precisa ler esse saldo (get), e para adicionar ou remover um
valor desse saldo (set, modificar o valor (valor aq ta literal)) o saldo precisa ser positivo (uma condição);
--------------------------
public string DescricaoResumida 
{
    get
    {
        return $"A musica {Nome} pertence a banda {Artista}";		       (01) APENAS O GET, APENAS LEITURA - n muito usual - 
    } 
}
-o metodo DescricaoResumida so possui get, ou seja, nao vai modificar o valor das variaveis, ele apenas vai ler as variaveis. É 
---------------------------
-voce consegue ter uma propriedade de somente leitura (get) ou apenas leitura (set);

public string DescricaoResumida =>
    $"A musica {Nome} pertence a banda {Artista}";    				(02)APENAS O GET, APENAS LEITURA - mais usual - 
-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/


LAMBDA (funcao anonima)
-lambdas no C# são funções anônimas que fornecem uma sintaxe concisa para escrever blocos de código em situações onde a criação de um método separado seria 
inconveniente ou desnecessário. Elas oferecem vantagens em termos de concisão, legibilidade, flexibilidade e encerramento de escopo;
-EXEMPLO (olha como fica melhor, mais resumido e mais regivel):

List<int> numeros = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };		

List<int> numerosPares = numeros.FindAll(BuscarNumerosQueSaoPares);
	
bool BuscarNumerosQueSaoPares(int numero)						List<int> numeros = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
                                                                PARA ISSO               List<int> numerosPares = numeros.FindAll(numero => numero % 2 == 0);
                                                                                        numerosPares.ForEach(numero => Console.WriteLine(numero));	
{	
    return numero % 2 == 0;						
}

foreach (int numero in numerosPares)
{
    Console.WriteLine(numero);
}

-Em vez de criar uma funcao, e ter um bloco de código, dps chamar ela, com o lambda(funcao anonima) voce consegue fazer tudo numa linha. Voce apenas colocao que ela
vai fazer, que nesse exemplo, é pegar todos os elementos da lista numeros (findAll) (o nome da funcao anonima é numero), vai armazenar todos os elementos que,
dividos por 2 com resto 0 (pares), em numero. Depois vai exibir eles no forEach (ja que forEach é realizar uma ação em uma array); 
-Eles são especialmente úteis quando se trata de trabalhar com coleções de dados, realizar operações em uma sequência de elementos ou lidar com delegados;

ARRAY
-private List<Musica> musicas = new List<Musica>() = aq eh so um exemplo. No caso, um campo privado que é um array (List) de Musica, que se chama musicas. Voce 
coloca o = newList... pra de fato criar ela;

-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ (topico grande que vai ter subtopicos dentro)
INTELIGANDO A CLASSE DA MUSICA COM BANDA
-Criamos uma classe chamada album, e dentro dela tem um método = 
public void AdicionarMusica(Musica musica) 
{

}
-No caso, Musica é uma outra classe, e musica é apenas o parametro (poderia ser qualquer nome);
-private List<Musica> musicas = campo privado que só vai estar disponivel dentro das chaves que definem a classe album. No caso, uma array;
-Aq temos entao duas classes. uma de album e outra de musica. No program.cs (vamos dizer q é a main) voce instancia o Album, no caso:

Album albumDoQueen = new Album();
Musica musica1 = new Musica();				-INSTANCIONANDO AS CLASSES, e criando-as;
Musica musica2 = new Musica();

albumDoQueen.Nome = "A night at the opera";
musica1.Nome = "Love of My Life";			-albumdoQueen musica1 musica2 sao propriedades das instancias, que irão receber valores específicos. No caso,
musica2.Nome = "Bohemian Rhapsody";			"A night at the opera", "Love of My Life" e "Bohemian Rhapsody" são os valores específicos das propriedades;


(agora completo)

Album albumDoQueen = new Album(); 
albumDoQueen.Nome = "A night at the opera";

Musica musica1 = new Musica();
musica1.Nome = "Love of My Life";

Musica musica2 = new Musica();
musica2.Nome = "Bohemian Rhapsody";

albumDoQueen.AdicionarMusica(musica1);		
albumDoQueen.AdicionarMusica(musica2);					
-Instancionamos 3 classes. Uma delas é a classe instancionada "albumDoQueen" que vai ter um nome, o nome do album do queen é "A night at the opera". As outras duas
classes instacionadas são da classe Musica. A primeira chama-se musica1 e atribui um nome de uma musica, no caso "Love of My Life". Depois criamos mais uma classe 
instancionada tambem da classe Musica, mas essa é uma segunda instancia, no caso musica2, e tambem atribuimos uma outra nova musica, seu nome é "Bohemian Rhapsody".
Por fim, na classe instanciada do Album, no caso albumDoQueen, chamamos a função .AdicionarMusica(musica1) e .AdicionarMusica(musica2), adicionando então o que foi
definido dentro de cada classe instancionada (cada uma das 2, um nome de uma musica) para um array dentro do album. RESUMINDO TUDO, ADICIONAMOS MUSICA EM UM ALBUM 
por meio de classes. Meio confuso talvez mas fez total sentido aq;
-----------------------------------
public void ExibirMusicasDoAlbum()
{
    Console.WriteLine($"Listas de musicas do ábum {Nome}:\n");
    foreach(var musica in musicas)
    {
        Console.WriteLine($"Musica: {musica.Nome}");
    }
}
-Criamos uma funcao para exibir entao as musicas do album, depois de todo esse processo. De primeira mão, eu pensei no for, para exibir os elementos da array, tipo
sla for (int i = 0; i<=strlen(musicas); i++) {
	Console.WriteLine($"{musica.Nome}");		-Sla, pensei em C. Enfim, pensei em usar o for;
}
-Mas ai, lembramos que para percorrer os elementos de uma lista/array, voce nao precisa usar o for, voce usar o foreach! e por isso fica daquele jeito:

    foreach(var musica in musicas) 	-para (var musica (os elementos) in musicas (presentes no array musicas) { exibir ent o nome das musicas };
    {
        Console.WriteLine($"Musica: {musica.Nome}");
    }
-----------------------------------
(como está ficando) PROGRAM.CS
    Album albumDoQueen = new Album(); //instanciando a classe 
    albumDoQueen.Nome = "A night at the opera";

    Musica musica1 = new Musica();
    musica1.Nome = "Love of My Life";
musica1.Duracao = 213; 

    Musica musica2 = new Musica();
    musica2.Nome = "Bohemian Rhapsody";
    musica2.Duracao = 354;

/*musica1 e musica2 sao propriedades que serao passadas como parametro para a funcao AdicionarMusica que, por sua vez tem a ação de adicionar o que 
 for de parametro no array. Ou seja, chamamos uma função que vai adicionar a música na lista de musicas, através da função*/
    albumDoQueen.AdicionarMusica(musica1); 
    albumDoQueen.AdicionarMusica(musica2);

albumDoQueen.ExibirMusicasDoAlbum();

(como esta ficando) ALBUM.CS
class Album
{
    private List<Musica> musicas = new List<Musica>();
    public string Nome { get; set; } //"A night at the opera"
    public int DuracaoTotal { get; set; }

    /*o metodo AdicionarMusica vai adicionar na lista musica, o parametro musica. No caso da sua estrutura, (Musica musica) Musica = pra onde vai; musica = o que vai ser levado
     */
    public void AdicionarMusica(Musica musica) 
    {
        musicas.Add(musica); //adicionar o parametro no array, ou seja, adicionar musica na lista de musicas. Dentro pra fora!
    }
    public void ExibirMusicasDoAlbum()
    {
        Console.WriteLine($"Listas de musicas do ábum {Nome}:\n");
        foreach(var musica in musicas)
        {
            Console.WriteLine($"Musica: {musica.Nome}");
        }
    }
}

(como esta ficando) MUSICA.CS
class Musica
{
    public string Nome { get; set; } //"Love of My Life" musica 1 e "Bohemian Rhapsody" musica 2
    public string Artista { get; set; }
    public int Duracao { get; set; }
    public bool Disponivel { get;  set; } //operacao de leitura e escrita 
    public string DescricaoResumida =>
        $"A musica {Nome} pertence a banda {Artista}";

    public void ExibirFichaTecnica()
    {
        Console.WriteLine($"Nome: {Nome}");
        Console.WriteLine($"Artista: {Artista}");
        Console.WriteLine($"Duracao: {Duracao}");
        Console.WriteLine($"Disponivel: {Disponivel}");
        if (Disponivel)
        {
            Console.WriteLine("Disponivel no plano");
        } else
        {
            Console.WriteLine("Adquita o plano Plus+");
        }
    }
}
---------------------
-Por fim, oq ele muda é tirar o metodo get set pra DuracaoTotal e criar uma funcao anonima que vai somar todos os valores de Duracao da classe Musica;
public int DuracaoTotal => musicas.Sum(m => m.Duracao) musicas.Sum(musicas é a lista de Musica(classe)). Mas somar oq la dentro? quero somar a duracao das musicas.
Por isso vc chama outra funcao anonima dentro da funcao anonima. (m => m.Duracao) é voce indicando o que voce quer somar tudo;